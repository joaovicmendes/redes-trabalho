#!/usr/bin/env python3

# Universidade Federal de São Carlos – UFSCar
# Departamento de Computação
# 1001504 - Redes de Computadores – Trabalho 1
# Prof. Dr. Paulo Matias
# Aluno: João Victor Mendes Freire
# RA: 758943

import asyncio
from tcp import Servidor
import re

_DELIM = b'\r\n'

name_conn_map = {}
canais_map = {}

class Canal:
    def __init__(self, nome):
        self.lista_membros = {}
        self.nome = nome

    def join_membro(self, conexao):
        # Colocando na lista de membros e enviando mensagem no canal
        self.lista_membros[ conexao.apelido.lower() ] = conexao
        for membro in self.lista_membros:
            conn = self.lista_membros[membro]
            resposta = b':' + conexao.apelido + b' JOIN :' + self.nome + _DELIM
            conn.enviar(resposta)

        # Enviando lista de usuários para membro que acabou de chegar
        membros = sorted(list(self.lista_membros))
        base = b':server 353 ' + conexao.apelido + b' = ' + self.nome + b' :'
        mensagem = base

        # Recortando para manter cada mensagem em no máximo 512 bytes
        mensagem += membros[0]
        for i in range(1, len(membros)):
            membro = membros[i]
            if len(mensagem + membro + b' ' + _DELIM) < 512:
                mensagem += b' ' + membro
            else:
                conexao.enviar(mensagem + _DELIM)
                mensagem = base + b' ' + membro

        conexao.enviar(mensagem + _DELIM)
        mensagem = b':server 366 ' + conexao.apelido + b' ' + self.nome + b' :End of /NAMES list.'
        conexao.enviar(mensagem + _DELIM)


    def part_membro(self, conexao):
        for membro in self.lista_membros:
            conn = self.lista_membros[membro]
            resposta = b':' + conexao.apelido + b' PART ' + self.nome + _DELIM
            conn.enviar(resposta)

        del self.lista_membros[ conexao.apelido.lower() ]

    def remove_membro(self, conexao):
        del self.lista_membros[ conexao.apelido.lower() ]

    def troca_apelido_membro(self, conexao, novo):
        del self.lista_membros[ conexao.apelido.lower() ]
        self.lista_membros[ novo.lower() ] = conexao

    def enviar(self, mensagem):
        remetente, _ = mensagem.split(b' ', 1)
        remetente = remetente[1:]
        for membro in self.lista_membros:
            if membro != remetente:
                conn = self.lista_membros[membro]
                conn.enviar(mensagem)


def validar_nome(nome):
    return re.match(br'^[a-zA-Z][a-zA-Z0-9_-]*$', nome) is not None


def sair(conexao):
    print(conexao, 'conexão fechada')

    # Comunicando membros da conexão encerrada
    membros = {}
    resposta = b':' + conexao.apelido + b' QUIT :Connection closed' + _DELIM

    # Remove de cada canal e adiciona os membros desse para a lista
    for canal in conexao.canais:
        canal.remove_membro(conexao)
        for membro in canal.lista_membros:
            membros[membro] = canal.lista_membros[membro]

    for membro in membros:
        conn = membros[membro]
        conn.enviar(resposta)

    # Removendo o apelido dos registrados no servidor
    if conexao.apelido != b'*':
        del name_conn_map[ conexao.apelido.lower() ]

    conexao.fechar()


def dados_recebidos(conexao, dados):
    # Caso parte do comando tenha vindo antes
    conexao.dados_residuais = conexao.dados_residuais + dados

    # Enquanto tiver um comando completo nos dados residuais
    while conexao.dados_residuais.find(_DELIM) != -1:
        # Recortando o primeiro comando completo existente
        dados, _, conexao.dados_residuais = conexao.dados_residuais.partition(_DELIM)
        dados += _

        # Interpretando comandos
        if dados == b'':
            return sair(conexao)

        if dados.startswith(b'PING'):
            comando_ping(conexao, dados)

        if dados.startswith(b'NICK'):
            comando_nick(conexao, dados)

        if dados.startswith(b'PRIVMSG'):
            comando_privmsg(conexao, dados)

        if dados.startswith(b'JOIN'):
            comando_join(conexao, dados)

        if dados.startswith(b'PART'):
            comando_part(conexao, dados)

    # Interpretando comandos
    if dados == b'':
        return sair(conexao)

    print(conexao, dados)


def conexao_aceita(conexao):
    print(conexao, 'nova conexão')
    conexao.registrar_recebedor(dados_recebidos)

    # Registrando dados vazios
    conexao.dados_residuais = b''
    conexao.apelido = b'*'
    conexao.canais = []


def comando_ping(conexao, dados):
    resposta = b':server PONG server :'
    try:
        resposta += dados.split(b' ', 1)[1]
    except IndexError:
        resposta += b''
    conexao.enviar(resposta)


def comando_nick(conexao, dados):
    # Recortando os dados recebidos
    try:
        apelido = dados.split(b' ', 1)[1].split(_DELIM)[0]
    except IndexError:
        apelido = b''

    # Verificando se nome já existe
    if apelido.lower() in name_conn_map:
        resposta = b':server 433 ' + conexao.apelido + b' ' + apelido + b' :Nickname is already in use' + _DELIM
        conexao.enviar(resposta)
        return

    # Se for o primeiro apelido
    if (conexao.apelido == b'*'):
        if validar_nome(apelido):
            # Adicionando apelido no mapeamento do servidor
            name_conn_map[ apelido.lower() ] = conexao
            conexao.apelido = apelido

            resposta = b':server 001 ' + apelido + b' :Welcome' + _DELIM
            conexao.enviar(resposta)
            resposta = b':server 422 ' + apelido + b' :MOTD File is missing' + _DELIM
            conexao.enviar(resposta)
        else:
            resposta = b':server 432 ' + b'* ' + apelido + b' :Erroneous nickname' + _DELIM
            conexao.enviar(resposta)
    # Se for trocar o apelido
    else:
        if validar_nome(apelido):
            # Removendo apelido antigo e adicionando novo no mapeamento do servidor
            del name_conn_map[ conexao.apelido.lower() ]
            name_conn_map[ apelido.lower() ] = conexao

            # Atualizando apelido nos canais que participa
            for canal in conexao.canais:
                canal.troca_apelido_membro(conexao, apelido)

            resposta = b':' + conexao.apelido + b' NICK ' + apelido + _DELIM
            conexao.apelido = apelido
            conexao.enviar(resposta)
        else:
            resposta = b':server 432 ' + conexao.apelido + b' ' + apelido + b' :Erroneous nickname' + _DELIM
            conexao.enviar(resposta)


def comando_privmsg(conexao, dados):
    # Recortando os dados recebidos
    _, destinatario, conteudo = dados.strip(_DELIM).split(b' ', 2)
    conteudo = conteudo[1:]

    if destinatario.lower() not in name_conn_map:
        return

    conexao_destino = name_conn_map[ destinatario.lower() ]
    resposta = b':' + conexao.apelido + b' PRIVMSG ' + destinatario + b' :' + conteudo + _DELIM
    conexao_destino.enviar(resposta)


def comando_join(conexao, dados):
    # Recortando os dados recebidos
    _, nome_canal = dados.strip(_DELIM).split(b' ', 1)

    # Verificando se o canal tem um nome válido
    if nome_canal[0] != b'#' and not validar_nome(nome_canal[1:]):
        resposta = b':server 403 ' + nome_canal + b' :No such channel' + _DELIM
        conexao.enviar(resposta)
        return

    # Criando ou recuperando o canal desejado
    if nome_canal.lower() not in name_conn_map:
        canal = Canal(nome_canal)
        name_conn_map[ nome_canal.lower() ] = canal
    else:
        canal = name_conn_map[ nome_canal.lower() ]

    conexao.canais.append(canal)
    canal.join_membro(conexao)


def comando_part(conexao, dados):
    # Recortando os dados recebidos
    _, nome_canal = dados.strip(_DELIM).split(b' ', 1)

    # Ignorando informações que vierem depois do nome do canal
    if nome_canal.find(b' ') != -1:
        nome_canal, _ = nome_canal.split(b' ', 1)

    # Verificando se o canal tem um nome válido
    if nome_canal[0] != b'#' and not validar_nome(nome_canal[1:]):
        resposta = b':server 403 ' + nome_canal + b' :No such channel' + _DELIM
        conexao.enviar(resposta)
        return

    # Recuperando o canal desejado
    if nome_canal.lower() not in name_conn_map:
        canal = Canal(nome_canal)
        name_conn_map[ nome_canal.lower() ] = canal
    else:
        canal = name_conn_map[ nome_canal.lower() ]

    conexao.canais.remove(canal)
    canal.part_membro(conexao)


servidor = Servidor(6667)
servidor.registrar_monitor_de_conexoes_aceitas(conexao_aceita)
asyncio.get_event_loop().run_forever()
